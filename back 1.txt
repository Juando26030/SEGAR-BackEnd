üìã RECOMENDACIONES PARA EL BACKEND - SISTEMA DE DOCUMENTOS DIN√ÅMICOS
‚úÖ INTEGRACI√ìN COMPLETADA EN EL FRONTEND
Se han creado los siguientes servicios para conectar con el backend:

1. DocumentTemplateService
Maneja las plantillas de documentos desde el backend
Convierte los DTOs del backend al formato esperado por el frontend
Endpoint principal: /api/document-templates
2. DocumentInstanceService
Maneja las instancias de documentos rellenados
Gestiona borradores, env√≠o y aprobaci√≥n
Endpoint principal: /api/tramites/{tramiteId}/document-instances
3. TramiteInvimaService (Actualizado)
Ahora consulta al backend en lugar de usar datos quemados
Mantiene las reglas de negocio INVIMA en el frontend
Obtiene documentos din√°micamente seg√∫n clasificaci√≥n
üö® REQUERIMIENTOS CR√çTICOS PARA EL BACKEND
1. Agregar campo orden en DocumentTemplate
PROBLEMA ACTUAL: El frontend necesita ordenar los documentos para mostrarlos en secuencia l√≥gica.

SOLUCI√ìN REQUERIDA: Agregar campo orden (Integer) a la entidad DocumentTemplate.java

@Entity
public class DocumentTemplate {
    // ...campos existentes...
    
    @Column(name = "orden")
    private Integer orden; // Orden de presentaci√≥n (1, 2, 3...)
    
    // Getters y setters
}
DTO tambi√©n debe incluirlo:

public class DocumentTemplateDTO {
    // ...campos existentes...
    private Integer orden;
}
IMPACTO: Sin este campo, los documentos se mostrar√°n en orden aleatorio en el frontend.

2. Validar estructura JSON de fieldsDefinition
El frontend espera que fieldsDefinition tenga esta estructura exacta:

[
  {
    "nombre": "nombre_comercial",
    "tipo": "text",
    "requerido": true,
    "placeholder": "Nombre del producto",
    "descripcion": "Nombre comercial del producto",
    "opciones": [],
    "validacion": {
      "min": 3,
      "max": 100,
      "pattern": "^[a-zA-Z0-9\\s]+$",
      "mensaje": "Solo letras, n√∫meros y espacios"
    }
  },
  {
    "nombre": "vida_util",
    "tipo": "number",
    "requerido": true,
    "placeholder": "En meses",
    "validacion": {
      "min": 1,
      "max": 120,
      "mensaje": "Debe ser entre 1 y 120 meses"
    }
  }
]
Tipos v√°lidos: text, number, date, textarea, select, file, checkbox

3. Validar estructura JSON de fileRules
{
  "maxSize": 10485760,
  "allowedTypes": ["PDF", "JPG", "PNG"],
  "required": true
}
IMPORTANTE:

maxSize en bytes (10MB = 10485760)
allowedTypes: array de strings con extensiones permitidas
required: booleano indicando si es obligatorio subir archivo
4. Endpoint /api/document-templates/by-tramite-riesgo debe soportar ambos par√°metros
Request actual esperado:

GET /api/document-templates/by-tramite-riesgo?tipoTramite=REGISTRO&categoriaRiesgo=ALTO
VALIDACI√ìN NECESARIA:

Si categoriaRiesgo=ALTO ‚Üí devolver documentos para RSA (Registro Sanitario)
Si categoriaRiesgo=MEDIO ‚Üí devolver documentos para PSA (Permiso Sanitario)
Si categoriaRiesgo=BAJO ‚Üí devolver documentos para NSO (Notificaci√≥n Sanitaria)
EJEMPLO DE RESPUESTA ESPERADA:

Para un producto de riesgo ALTO (RSA), el backend deber√≠a devolver plantillas como:

[
  {
    "id": 1,
    "code": "CERTIFICADO_EXISTENCIA",
    "name": "Certificado de Existencia y Representaci√≥n Legal",
    "description": "Certificado expedido por la C√°mara de Comercio con vigencia no mayor a 30 d√≠as",
    "fieldsDefinition": "[{...}]",
    "fileRules": "{\"maxSize\":10485760,\"allowedTypes\":[\"PDF\"],\"required\":true}",
    "appliesToTramiteTypes": ["REGISTRO"],
    "categoryRiesgo": "ALTO",
    "required": true,
    "orden": 1,
    "version": "1.0",
    "active": true
  },
  {
    "id": 2,
    "code": "FICHA_TECNICA_BASICA",
    "name": "Ficha T√©cnica B√°sica",
    "orden": 2,
    // ...resto de campos...
  },
  // ... m√°s documentos seg√∫n el riesgo
]
üìä MAPEO DE CATEGOR√çAS DE RIESGO
El frontend determina el tipo de tr√°mite y categor√≠a as√≠:

Categor√≠a Riesgo	Tipo Tr√°mite	Documentos Base
BAJO	NSO (Notificaci√≥n Sanitaria)	~5 documentos b√°sicos
MEDIO	PSA (Permiso Sanitario)	NSO + 5 adicionales (an√°lisis, BPM)
ALTO	RSA (Registro Sanitario)	PSA + 6 adicionales (HACCP, estudios)
RECOMENDACI√ìN: Crear un seeder/migration que pre-cargue estos documentos base en la BD.

üîß SUGERENCIAS DE MEJORA PARA EL BACKEND
1. Endpoint para obtener categor√≠as √∫nicas
GET /api/document-templates/categories
Retorna: ["basico", "analisis", "certificacion", "estudios", "otros"]

2. Endpoint para validar completitud antes de radicar
POST /api/tramites/{id}/validate-documents
Valida que todos los documentos obligatorios est√©n en estado SUBMITTED o APPROVED.

3. Agregar campo category a DocumentTemplate
Para clasificar documentos por tipo:

basico: Documentos fundamentales (certificados, fichas)
analisis: An√°lisis microbiol√≥gicos, fisicoqu√≠micos
certificacion: BPM, HACCP, ISO
estudios: Estabilidad, vida √∫til
otros: Documentos complementarios
üéØ DATOS DE EJEMPLO PARA TESTING
Plantilla para NSO (Riesgo BAJO):
INSERT INTO document_template (code, name, description, fields_definition, file_rules, category_riesgo, required, orden, version, active) 
VALUES (
  'CERTIFICADO_EXISTENCIA',
  'Certificado de Existencia y Representaci√≥n Legal',
  'Certificado expedido por la C√°mara de Comercio con vigencia no mayor a 30 d√≠as',
  '[{"nombre":"razon_social","tipo":"text","requerido":true,"placeholder":"Raz√≥n social de la empresa"},{"nombre":"nit","tipo":"text","requerido":true,"placeholder":"NIT sin d√≠gito de verificaci√≥n"},{"nombre":"archivo","tipo":"file","requerido":true}]',
  '{"maxSize":10485760,"allowedTypes":["PDF"],"required":true}',
  'BAJO',
  true,
  1,
  '1.0',
  true
);
üöÄ PR√ìXIMOS PASOS RECOMENDADOS
‚úÖ Agregar campo orden a DocumentTemplate
‚úÖ Crear seeders con documentos base para NSO, PSA y RSA
‚úÖ Validar que endpoint by-tramite-riesgo funcione correctamente
‚úÖ Implementar endpoint de validaci√≥n de completitud
‚úÖ Documentar formato exacto de JSON para fieldsDefinition
üìû COMUNICACI√ìN FRONTEND-BACKEND
Flujo completo esperado:
Usuario clasifica producto ‚Üí Frontend determina NSO/PSA/RSA
Frontend consulta: GET /api/document-templates/by-tramite-riesgo?tipoTramite=REGISTRO&categoriaRiesgo=ALTO
Backend retorna: Lista de plantillas ordenadas
Frontend renderiza formularios din√°micamente
Usuario llena datos ‚Üí Frontend crea: POST /api/tramites/{id}/document-instances
Usuario sube archivos ‚Üí POST /api/tramites/{id}/document-instances/{docId}/upload
Usuario radica ‚Üí Frontend valida completitud y env√≠a solicitud
‚ö†Ô∏è PROBLEMAS ACTUALES A RESOLVER
‚ùå Sin estos cambios, el sistema NO funcionar√°:
Sin campo orden: Documentos se mostrar√°n desordenados
Sin validaci√≥n de JSON: Errores de parseo en frontend
Sin datos semilla: No habr√° documentos para mostrar
Sin endpoint de validaci√≥n: Radicaci√≥n sin verificar completitud
‚úÖ CONFIRMACI√ìN DE INTEGRACI√ìN
Una vez implementados los cambios, el backend debe retornar respuestas como:

{
  "id": 1,
  "code": "FICHA_TECNICA",
  "name": "Ficha T√©cnica B√°sica",
  "description": "Informaci√≥n b√°sica del producto",
  "fieldsDefinition": "[{\"nombre\":\"nombre_producto\",\"tipo\":\"text\",\"requerido\":true}]",
  "fileRules": "{\"maxSize\":10485760,\"allowedTypes\":[\"PDF\"],\"required\":false}",
  "appliesToTramiteTypes": ["REGISTRO"],
  "categoryRiesgo": "BAJO",
  "required": true,
  "orden": 2,
  "version": "1.0",
  "active": true
}
Fecha: 2025-01-14
Versi√≥n Frontend: Angular 19.2
IP Backend: http://35.238.19.224:8090
Estado: ‚úÖ Frontend listo - ‚è≥ Esperando ajustes en backend